library(shiny)
library(shinythemes)
library(tidyverse) 
library(reshape2) 


load("~rosmap_postprocV2.RData")
dat<- subjects_genes%>% 
    rownames_to_column("subject") %>% 
    melt(id = "subject")%>% 
    select(subject,
         gene = variable, 
         expression = value)
dat$gene_name<- sub(':.*$',"",dat$gene)

#to id outlier subjects in plots
is_outlier <- function(x) {
  return(x < quantile(x, 0.25) - 1.5 * IQR(na.omit(x)) | x > quantile(x, 0.75) + 1.5 * IQR(na.omit(x)))
}

ui <- fluidPage(theme = shinytheme("slate"),
                tabsetPanel(
                  
                  tabPanel(titile=NULL,   titlePanel("ROSMAP Data Gene Expression (Chr18-22)"),
                           
                           sidebarLayout(
                             sidebarPanel(
                               selectInput("geneInput1", "First Gene", levels(factor(dat$gene_name))),
                               selectInput("geneInput2", "Second Gene", c("None",levels(factor(dat$gene_name))))# to add more if needed,

                             ),
                             mainPanel(navbarPage(title = NULL, 
                                                  tabPanel("Gene Expression", 
                                                           plotOutput("per_gene_plot"),
                                                           tableOutput("outlierTable"))
                             )

                             )
                             
                           ))
                ))


server <- function(input, output) {
  
  output$per_gene_plot <- renderPlot({
    per_gene_data <-
      dat %>%
      filter(gene_name == input$geneInput1[1] | gene_name == input$geneInput2[1]) %>% 
      mutate(is.outlier=ifelse(is.na(expression), FALSE, is_outlier(na.omit(expression)))
      ) %>% 
      mutate(outlier=ifelse(is.outlier == T, subject, as.numeric(NA)))
    
    ggplot( per_gene_data, aes(y=expression, x=gene_name)) +
      geom_boxplot(outlier.colour = "red", outlier.shape = 1)+
      ggtitle("Distribution of gene expression for selected genes") +
      labs(x = "Selected Gene", y="Expression")+
      theme_bw()
    
    
  })
  
  output$outlierTable<- renderTable( {
    
    per_gene_data <-
      dat %>%
      filter(gene_name == input$geneInput1[1] | gene_name == input$geneInput2[1])%>% 
      mutate(is.outlier=ifelse(is.na(expression), FALSE, is_outlier(na.omit(expression)))
      ) %>% 
      mutate(outlier=ifelse(is.outlier == T, subject, as.numeric(NA)))
    outlier_data<- per_gene_data%>%
      filter( !is.na(outlier))%>%
      select(Gene=gene_name, 
             outlierSubjects=subject,
             Expression=expression)
  })
  
  
  
}

# Run the application 
shinyApp(ui = ui, server = server)
